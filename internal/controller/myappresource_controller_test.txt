package controller

import (
	"context"
	"time"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/client/fake"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	myapigroupv1alpha1 "github.com/kommineni24/k8appcontroller/api/v1alpha1"
	corev1 "k8s.io/api/core/v1"
)

var _ = Describe("MyAppResource Controller", func() {
	Context("When reconciling a resource", func() {
		const resourceName = "test-resource"

		ctx := context.Background()

		typeNamespacedName := types.NamespacedName{
			Name:      resourceName,
			Namespace: "default", // Modify as needed
		}
		myappresource := &myapigroupv1alpha1.MyAppResource{}

		// Create the scheme object
		scheme := runtime.NewScheme()

		// Create a fake client
		fakeClient := fake.NewClientBuilder().WithScheme(scheme).Build()

		BeforeEach(func() {
			By("creating the custom resource for the Kind MyAppResource")
			err := fakeClient.Get(ctx, typeNamespacedName, myappresource)
			if err != nil && errors.IsNotFound(err) {
				resource := &myapigroupv1alpha1.MyAppResource{
					ObjectMeta: metav1.ObjectMeta{
						Name:      resourceName,
						Namespace: "default",
					},
					// Add necessary spec details if needed.
				}
				Expect(fakeClient.Create(ctx, resource)).To(Succeed())
			}
		})

		AfterEach(func() {
			// Cleanup logic after each test, like removing the resource instance.
			resource := &myapigroupv1alpha1.MyAppResource{}
			err := fakeClient.Get(ctx, typeNamespacedName, resource)
			if err == nil {
				By("Cleanup the specific resource instance MyAppResource")
				Expect(fakeClient.Delete(ctx, resource)).To(Succeed())
			}
		})

		It("should successfully reconcile the resource", func() {
			By("Reconciling the created resource")
			controllerReconciler := &MyAppResourceReconciler{
				Client: fakeClient,
				Scheme: scheme,
			}

			_, err := controllerReconciler.Reconcile(ctx, reconcile.Request{
				NamespacedName: typeNamespacedName,
			})
			Expect(err).NotTo(HaveOccurred())
			// Add more specific assertions depending on your controller's reconciliation logic.
			// Example: If you expect a certain status condition after reconciliation, verify it here.
		})

		// Define timeout and interval variables
		var (
			timeout  = time.Second * 30 // Set timeout to 30 seconds
			interval = time.Second * 1  // Set interval to 1 second
		)

		Context("When deleting a pod", func() {
			It("should delete the pod", func() {
				// Prepare the initial state by creating a pod
				pod := &corev1.Pod{
					ObjectMeta: metav1.ObjectMeta{
						Name:      "test-pod",
						Namespace: "default",
						Labels: map[string]string{
							"app":   "test-resource",
							"color": "blue",
						},
					},
					Spec: corev1.PodSpec{
						Containers: []corev1.Container{
							{
								Name:  "app-container",
								Image: "nginx:latest",
							},
						},
					},
				}
				Expect(fakeClient.Create(ctx, pod)).To(Succeed())

				// Verify that the pod is created
				createdPod := &corev1.Pod{}
				Expect(fakeClient.Get(ctx, types.NamespacedName{Name: "test-pod", Namespace: "default"}, createdPod)).To(Succeed())

				// Simulate pod deletion
				Expect(fakeClient.Delete(ctx, pod)).To(Succeed())

				// Verify that the pod is deleted
				Eventually(func() error {
					deletedPod := &corev1.Pod{}
					err := fakeClient.Get(ctx, types.NamespacedName{Name: "test-pod", Namespace: "default"}, deletedPod)
					if errors.IsNotFound(err) {
						return nil
					}
					return err
				}, timeout, interval).Should(Succeed())
			})
		})

		Context("When creating pods", func() {
			It("should create pods for the resource", func() {
				// Simulate the creation of MyAppResource
				myappresource := &myapigroupv1alpha1.MyAppResource{
					ObjectMeta: metav1.ObjectMeta{
						Name:      resourceName,
						Namespace: "default",
					},
					// Add necessary spec details if needed.
				}
				Expect(fakeClient.Create(ctx, myappresource)).To(Succeed())

				// Reconcile the resource
				controllerReconciler := &MyAppResourceReconciler{
					Client: fakeClient,
					Scheme: scheme,
				}
				_, err := controllerReconciler.Reconcile(ctx, reconcile.Request{
					NamespacedName: typeNamespacedName,
				})
				Expect(err).NotTo(HaveOccurred())

				// Verify that the pod is created
				createdPod := &corev1.Pod{}
				podName := "test-pod"
				podNamespace := "default"
				podLabels := map[string]string{
					"app":   "test-resource",
					"color": "blue",
				}
				Expect(fakeClient.Get(ctx, types.NamespacedName{Name: podName, Namespace: podNamespace}, createdPod)).To(Succeed())

				// Verify pod metadata
				Expect(createdPod.ObjectMeta.Name).To(Equal(podName))
				Expect(createdPod.ObjectMeta.Namespace).To(Equal(podNamespace))
				Expect(createdPod.ObjectMeta.Labels).To(Equal(podLabels))
			})
		})

		Context("When updating a pod", func() {
			It("should update the pod", func() {
				// Prepare the initial state by creating a pod
				pod := &corev1.Pod{
					ObjectMeta: metav1.ObjectMeta{
						Name:      "test-pod",
						Namespace: "default",
						Labels: map[string]string{
							"app":   "test-resource",
							"color": "blue",
						},
					},
					Spec: corev1.PodSpec{
						Containers: []corev1.Container{
							{
								Name:  "app-container",
								Image: "nginx:latest",
							},
						},
					},
				}
				Expect(fakeClient.Create(ctx, pod)).To(Succeed())

				// Verify that the pod is created
				createdPod := &corev1.Pod{}
				Expect(fakeClient.Get(ctx, types.NamespacedName{Name: "test-pod", Namespace: "default"}, createdPod)).To(Succeed())

				// Simulate pod updation
				updatedPod := pod.DeepCopy()
				updatedPod.Spec.Containers[0].Image = "nginx:alpine"
				Expect(fakeClient.Update(ctx, updatedPod)).To(Succeed())

				// Verify that the pod is updated
				eventuallyUpdatedPod := &corev1.Pod{}
				Expect(fakeClient.Get(ctx, types.NamespacedName{Name: "test-pod", Namespace: "default"}, eventuallyUpdatedPod)).To(Succeed())
				Expect(eventuallyUpdatedPod.Spec.Containers[0].Image).To(Equal("nginx:alpine"))
			})
		})

	})
})
